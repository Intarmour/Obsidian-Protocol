# Obsidian Protocol - Multi-Cloud Credential Configuration Example
# Updated: Supports headless mode, AWS Organizations, and multi-cloud via .env detection
# This file supports AWS, Azure, and GCP. Only one is required, but you may configure all.
# Fill only the credentials needed for your cloud provider.
# For AWS, Azure, and GCP you may use one or multiple providers.
# Only one is required for the tool to work. Others are optional.

# AWS Credentials (required for AWS-based operations)
# Required if using AWS-based scenarios or TTPs
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
# Example: us-east-1
AWS_DEFAULT_REGION=us-east-1

# Azure Credentials (optional)
# Required if using Azure-based scenarios or TTPs
# Example: your-subscription-id
AZURE_SUBSCRIPTION_ID=your-subscription-id
# Example: your-client-id
AZURE_CLIENT_ID=your-client-id
# Example: your-client-secret
AZURE_CLIENT_SECRET=your-client-secret
# Example: your-tenant-id
AZURE_TENANT_ID=your-tenant-id

# GCP Credentials (optional)
# Required if using GCP-based scenarios or TTPs
# Example: your-project-id
GCP_PROJECT_ID=your-project-id
# Example: /path/to/your/service-account-key.json
GCP_SERVICE_ACCOUNT_KEY_PATH=/path/to/your/service-account-key.json

# AWS Organizations (optional)
# Required for executing cross-account scenarios in AWS Organizations
# Example: your-org-id
# If enabled, cross-account enumeration will be performed automatically (if supported by CLI flags).
AWS_ORGANIZATION_ID=your-org-id

# Note: Leave values empty if not used. The CLI will automatically detect the configured provider.
# If HEADLESS_MODE is true, EXECUTION_FILE and PROVIDER must be set appropriately.
# PROVIDER can be: aws, azure, or gcp.

# Headless mode flags (used to run without prompts). These can be overridden by CLI arguments.
# Use these flags to skip interactive CLI selection
# Example: python cli.py --file=ttps/example.yaml --provider=aws
HEADLESS_MODE=true
EXECUTION_FILE=ttps/example.yaml
PROVIDER=aws